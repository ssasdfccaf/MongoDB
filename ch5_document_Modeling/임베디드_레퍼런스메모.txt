컬렉션 사이의 관계
의 구성중에, 
내부의 구성요소, 도큐먼트 라고 함. 
필드의 타입이 객체, 배열 형식으로도 가능함. 

RDBMS 비교시에 생소하지만, 임베디드 구성.
-> 레퍼런스, 외래키를 이용해서, 참조하는 방식. 

JPA -> ORM 기술이 보면-> 엔티티 클래스(디비의 테이블되는 클래스) 
여기서는 임베디된 부분이 있었음. 
List<User> userList 


-임베디드 방식
하나의 도큐먼트 문서 안에 , 하나의 필드의 값을 배열 형식으로 해서, 
한 문서안에 여러 게시글을 사용하는 방식. 
예) '게시글': [{게시글 내용1},{게시글 내용2},...]
예2) '게시글': [{댓글1},{댓글2},...]
- 특징
- 도큐먼트 크기가 무한히 커질수 있는 점
- 게시글 필드의 값이 매우 많아짐 
- 새로운 정보 추가시 도큐먼트를 수정하여 정보를 추가

- 임베디드 사용시 
- 장점
- 도큐먼트 생성 및 삭제시 하나의 도큐먼트에 대해 원자성이 지켜짐
- 특정 버전이후로 트랜잭션 기능이 있고, 복제,샤딩을 구성시 
- 반드시, 트랜잭션 여부를 확인함
- 읽는 속도가 레퍼런스 방식에 비해 더 빠르다
- 만약, 매우 일부분의 정보를 불러와야 한다면 읽기 성능이 더 느려짐
- 빈번하게 함께 읽게 되는 정보는 하나의 도큐먼트에 넣는 것이 좋음

- 단점
- 도큐먼트 크기는 16MB까지 제한 
- 정보를 추가하거나 수정시 수정해야 하므로 불리
- 많은 정보를 모두 램 메모리에 읽어 뒤 수정이 일어나므로 느려짐
- 복제가 된 상황이라면 수정되는 도큐먼트 내의 모든 정보를 자신의 
서버와 복제된 정보를 가져야하는 서버에 보내므로 더 비효율
- 도큐먼트의 크기는 100kb 이하 상태 유지하는 것을 추천
- 중복된 정보를 허용하기 때문에 중복된 만큼 데이터베이스의 용량이 낭비
- 공식 문서에서는 중복에서 오는 손해보다 읽기 속도를 향상시키는 이점이 
훨씬 크다고 함
- 임베디드된 정보를 한꺼번에 많이 읽어와야 할 때 레퍼런스 방식보다 더 유리

- 결론
- 주로 읽기 작업을 하고, 읽기 작업시 그 정보들을 함께 불러올 경우가 많다면 사용.

-레퍼런스 방식
- 특징
- 정보의 양이 늘어날수록 크기가 작은 도큐먼트의 개수가 늘어남
- 도큐먼트 사이의 관계를 저장하기 위한 필드가 더 필요
- 새로운 정보 추가시 도큐먼트 자체를 생성하여 컬렉션에 넣음
- 하나의 도큐먼트 크기가 너무 크면, 일대일 관계로 해당 도큐먼트 쪼개는 방법 고려
- 도큐먼트 내부에 특정 필드값이 지속적으로 수정되는 상황이면 
해당 필드를 따로 일대일로 분리, 성능상 유리.




