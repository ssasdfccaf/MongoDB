- 복제
- 고가용성 환경을 위해 필요한 기술
- 이용시 물리적으로 데이터베이스가 망가지거나, 연결이 끊어지는 
극단적인 상황에서도 빠른 복구를 보장

- 복제세트 이해
- 복제는 여러 서버가 서로의 역할을 나누어 정보를 동기화하는 것  
- 대부분 DBMS는 복제 구성시 외부 툴을 배워서 적용함
- 몽고디비는 복제의 기능을 내부적으로 지원
- 서비스 중인 몽고디비 인스턴스에 문제가 생길시 정보가 복제된 
다른 인스턴스를 이용해서 문제가 생긴 인스턴스를 대체 하는 것
- 어떤 상황에서도 데이터베이스가 클라이언트와 지속해서 정상작동을 
하는 것을 고가용성 환경이라함
- 복제 후 복제된 인스턴스들을 이용해서 읽기 작업의 부하를 분산
- 복제된 인스턴스는 변경된 정보를 동기화하는 시간이 걸림
- 읽기 작업 분산시 변경된 사항이 즉시 반영되지 않는 부작용도 있음

- mongod 인스턴스 가 모인 묶음 필요, 이 묶음에 속하게 되면 
서로의 정보를 동기화 
- 복제를 수행하기 위한 인스턴스의 묶음을 복제세트라 함

- 복제 세트 다양한 종류의 구성원
- 클라이언트와 읽기 및 쓰기 작업을 하는 프라이머리(Primary)
- 각각의 복제 세트에서 오직 하나만 존재함
- 직접적으로 클라이언트와 소통하므로 서버가 작동을 멈추거나,
네트워크상 연결이 끊어지면 다른 복제 세트 구성원이 있더라도
클라이언트가 일시적으로 정보를 읽고 쓰지 못함


- 프라이머리 구성원의 정보를 동기화하는 세컨더리(Secodary)
- 프라이머리 서버의 변경된 정보를 지속적으로 동기화하면서,
만약, 프라이머리가 문제가 발생하면 세컨더리 구성원 중 하나가 
프라이머리가 됨
- 선거시 후보가 됨
- 프라이머리 구성원에 문제 발생시 그 역할을 대신하기 위해 
- 세컨더리 구성원 사이의 우선순위를 설정하고 클수록 프라이머리 
후보로 됨 
- 우선순위 0으로 설정시 후보가 못됨
- 클라이언트의 읽기 요청 분담하는 기능 
- 복제 세트의 읽기 선호 설정을 변경시 클라이언트가 세컨더리로부터 
정보 읽기 가능
- 변경 사항을 반영시 일정 시간이 걸리기 때문에, 실시간 서비스에는 
안 좋음 
- 프라이머리의 정보를 일정 시간 늦게 반영하는 기능 지연된 복제 구성원이라함
- 프라이머리 선출 선거의 후보로 나서지 않고, 투표권도 가지고 있지 않음
- 대규모 업데이트후 문제 발생시 , 복제 지연 구성원으로 문제 발견 및 
롤백을 결정하여 바로 프라이머리로 대체 가능


- 정보를 저장하지 않고 복제 세트의 복구를 돕는 아비터(Arbiter)
- 프라이머리부터 정보를 복제 안함
- 후보도 안됨 
- 선거 개최시 세컨더리의 상태를 보고 투표 가능 


- 구성원 공통 기능 
- 돌발 상황에 대비하기 위한 기능을 가짐.
- 문제가 발생했는지 파악하기 위해 구성원이 서로 살아있는지 10초마다
핑을 보내 확인하는 작업 수행. 이작업 하트비트(heartbeat)라고함
- 문제 발견시 해결하기 위해 프라이머리 구성원을 선출하는 선거 진행
- 각각의 구성원은 대부분 투표 가능


- 선거 개최를 위한 조건 
- 프라이머리에 문제 발생시 인식 
- 하트비트를 통해 이상을 감지한 구성원의 과반이어야만 선거 개최 
- 만약, 복제 세트 구성원을 두개로 구성시 선거 못함
- 복구를 위해, 최소 세개의 구성이 필요
- 비용적인 측면으로 구성시, 세번째 구성원을 아비터로 구성 
- 좋은 성능의 서버 두 대에 각각 프라이머리, 세컨더리, 낮은 성능의 아비터로 구성 
- 두 인스턴스를 하나의 서버에 동작 시키면 위험함, 최대한 독립구성

- 복제 세트의 선거 
- 장애 감지시 최대한 우선순위가 높은 세컨더리가 선거를 개최하고 후보가됨
- 후보에 대한 찬성표를 세컨더리 구성원들과 아비터 구성원이 보내게 됨
- 일정 시간 과반의 표 받으면 후보 세컨더리가 프라이머리가 되고 선거 종료
- 선거가 성공적으로 끝나면 가장 우선순위가 높고 최신의 정보를 가지고 
있는 세컨더리가 프라이머리로 선출됨

- 주의사항
- 하나의 복제 세트에는 최대 일곱개의 구성원만이 투표권을 가짐
- 복제세트의 구성원은 최대 50개까지 가능
- 7개의 구성원 이외에는 투표권이 없게 설정해야함
- 선거 후 선출된 프라이머리보다 더 최신의 정보를 가지고 있는 세컨더리
프라이머리가 가지고 있는 정보에 맞춰서 롤백함
- 프라이머리의 정보와 최신의 정보를 지움 동기화 작업을 위해
- 롤백시 프라이머리에 문제가 발생시 데이터 손실이 일어날수 있음 
- WriteConcern을 보수적으로 설정시, 장애가 발생시 롤백을 안함 


- 복제세트 구성하기
mongod
 --replSet <복제 세트 이름>
 --port <포트번호>
 --bind_ip <연결할아이피>
 --dbpath <정보를 저장할 경로>
 --oplogSize <오피로그 크기>

예)
mongod 
  --replSet rs0 
  --port 27018 
  --bind_ip localhost 
  --dbpath /db/data/rs0-0

구성시 샘플예제 
실습 메모 참고. 
---------------------------------------
- 배포 환경에 복제 세트 구성 
- 보안에 주의 
- SSL 네트워크 통신 
- 사용자 인증 


- 서비스 설정 
- 윈도우 환경 -> 설치된 디렉토리/bin/mongod.cfg 
- bindIp: 127.0.0.1 
- 연결을 허용할 아이피 , 모두 허용 0.0.0.0
- port: 27017 

- 복제세트 세부 설정 

{
 _id : <복제 세트 이름>,
 members: [
  {
  // 필수, 멤버를 구하는 값, 0부터 시작해서 멤버 추가시 1씩 증가
   _id: <int>,
   host: <구성원 호스트>,
   //옵션, 기본 false, 구성원을 아비터 사용시, true
   arbiterOnly: <boolean>,
   //옵션, priority 0이 아닐 때 기본값 true
   // 프라이머리를 따라서 인덱스를 백업 할것인지 정할수 있음.
   buildIndexes: <boolean>,
   //옵션, 기본 false, true이면 드라이버가 해당 구성원에 
   // 명령을 내리지 못함. 설정시 isMaster() 명령어로 
   // 구성원 못찾음.
   hidden: <boolean>,
   // 필수, 선거시 높을수록 프라이머리가 되고,
   // 0인 경우 프라이머리로 사용 안한다는 뜻
   priority: <number>,
   // 옵션, 태크 도큐먼트를 넣엇 복제 구성원을 그룹에 따라 
   // 나누기 , 태그 이용하면 WriteConcern시 이용 가능.
   tags: <document>,
   // 옵션, 기본값 0, 프라이머리로부터 이 필드에 정해진 시간 
   // 이전의 데이터를 유지하게 설정. 0 이외의 값을 설정하려면
   // priority의 값이 0이어야 함. 
   slaveDelay: <int>,
   // 옵션, 기본값 1표씩 가짐, 이 값에 따라 선거 시 해당 구성원의 
   // 투표수가 결정. 
   votes: <number>
  }
 ]
}


------------------------------------


- 읽기 선호 설정 
- 어떻게 읽기 작업을 분산시킬 수 있는지 실제적인 방법 
- 읽기 선호 설정에 대해서 
- 몽고디비 드라이버에는 매 명령마다 읽기 선호를 설정 가능
- 각 드라이버의 설정에 맞추기

- 프라이머리 구성원에서 읽는 상태(primary)
- 기본값 
- 단일 프라이머리 구성원으로부터 정보를 읽을 수 있음
- 데이터 수정 및 삽입 커밋 이후 딜레이 없이 변경사항 확인 
- 

다음에 추가하기.
