- 고급 스테이지 소개.

1 $bucket
도큐먼트를 범위에 따라 그룹화



2 $bucketAuto
도큐먼트를 자동적으로 범위에 따라 그룹화


3 $addFields
새로운 필드를 추가


4 $facet
각 필드에 대한 파이프라인을 수행해서 해당 필드에
파이프라인의 출력값을 배열의 형태로 저장.


5 $lookup
같은 디비에 있으면서, 샤딩되지 않은 외부 컬렉션에
대해서 현재 필드와 외부 컬렉션의 필드가 일치하면
배열로 외부 컬렉션 도큐먼트를 가져옴.


6 $replaceRoot
주어진 도큐먼트를 newRoot 값으로 바꿈.


7 $sample
주어진 size 값 만큼 랜덤하게 도큐먼트를 가져옴.


8 $sortByCount
주어진 필드의 값이 같은 도큐먼트 끼리 그룹화 후,
도큐먼트의 숫자를 세어 표시하고,내림차순으로 정렬.
$group 과 $sort 작업을 한것과 같은 의미.


---------------------------------


1 $bucket
도큐먼트를 범위에 따라 그룹화

$group 스테이지가 값으로 도큐먼트 묶음.
$bucket 스테이지는
지정된 필드값의 범위에 따라 그룹화.
만약, 그룹화하려는 값이 정수값이면 -> $group
실수값이면 범위로 묶는 -> $bucket 스테이지

형식
{
$bucket: {
// 타입: 문자열
// 정해지 해당 필드의 값에 따라 그룹화
groupBy: <expression>,
// 타입: 배열
// 정해진 필드의 값의 범위를 정한다.
boundaries: [<lowerbound1>,
<lowerbound2>,...],
// 타입: 문자열
// 옵션, 정한 구간 외의 도큐먼트를 모을 필드명 정하기.
default: <literal>,
// 타입 : document
// 옵션, 그룹화를 하고 난 후
// 출력 결과를 어떻게 표시할지 결정.
output: {
<output1> : {<$연산식>},
...
<outputN> : {<$연산식>},
}

}
}

//p165 고급스테이지 bucket
//필드의 범위에 따라서 그룹화
// group 필드 값으로 그룹화를 했음.

db.rating.aggregate([
{
$bucket: {
groupBy: "$rating",
boundaries: [2, 3, 5],
default: "Others", // 범위 밖의 기본값 필드의 이름.
output: {
count: { $sum: 1 },
user_ids: { $push: "$user_id" }, // 배열로 나타내기.
},
},
},
]);

-> rating 필드를 기준으로 ,
[2,3), [3,5) 두 구간으로 묶고,
그외 도큐먼트는 _id 값이 " Others"

주의사항,
boundaries의 배열 요소 데이터 타입이
동일하도록 설정해주어야 함.

2 $bucketAuto
도큐먼트를 자동적으로 범위에 따라 그룹화
만약, 컬렉션 내의 도큐먼트들을 4등분해서
통계를 보여주길 바란다면 애플리케이션과 데이터베이스
사이에 중간에 불필요한 쿼리가 생김.
그래서,
형식
{
$bucketAuto: {
groupBy: <expression>,
buckets: <number>,
output: {
<output1> : {<$연산식> },
...
}
granularity: <string>
}
}
-> default 필드 대신 , buckets 필드 대체.
buckets
필수적으소 설정해야하는 필드.
모든 도큐먼트를 몇개의 그룹으로 항목을 나눌지 설정 가능.
-> boundaries 필드 대신 , granularity 생김.
옵션, 어떤 기준으로 분류할지 설정 가능.
참고만, 수열 부분임.
주의사항, 기준이 되는 값 전부 숫자이여야함.

3 $addFields
새로운 필드를 추가
형식
{
$addFields: {
<newField> : <expression>,...
}
}

예시1)
db.rating.aggregate([
{
$addFields : {
hi: "world"
}
},
{ $project: {hi:1}},
{ $limit: 3}
])

예시2)
db.rating.aggregate([
{
$addFields : {
"hi.hello": "world"
}
},
{ $project: {hi:{hello:1}},
{ $limit: 3}
])

4 $facet
각 필드에 대한 파이프라인을 수행해서 해당 필드에
파이프라인의 출력값을 배열의 형태로 저장.
형식
{
$facet:
{
<outputField1>:[<stage1>,<stage2>,...],
<outputField2>:[<stage1>,<stage2>,...],
...
}
}

예시)
db.rating.aggregate([
{
$facet: {
categorizedByRating : [
{ $group: {_id: "$rating",
count: {$sum: 1}
}}
],
"categorizedById(Auto)":[
{ $bucketAuto: {groupBy:
"$_id", buckets:5} }
]
}
}
])
-> categorizedByRating 필드의 배열에
rating에 따라 각각의 도큐먼트 수를 세는 스테이지
, categorizedById(Auto) 필드의 배열에
_id에 따라 자동으로 5개 그룹으로 나누기 스테이지

5 $lookup -> RDBMS join 과 비슷. 
같은 디비에 있으면서, 샤딩되지 않은 외부 컬렉션에
대해서 현재 필드와 외부 컬렉션의 필드가 일치하면
배열로 외부 컬렉션 도큐먼트를 가져옴.
-> 서로다른 컬렉션의 정보를 합칠수 있게 도와주는
스테이지 , 조인과 비슷.

형식
{
$lookup:
{
// 타입: 문자열
// 어떤 도큐먼트를 조인할지 정함.
from: <collection to join>,
// 타입 : 문자열
// 넘겨받은 도큐먼트의 어떤 필드를
//from에서 정한 도큐먼트의 필드와
// 매칭할지 정함.
localField : <field from the input documents>,
// 타입 : 문자열
//from에서 선택한 도큐먼트에서
// 어떤 필드를 localField에서 정한 필드와
// 매칭할지 정함.
foreignField: < field from the documents of the " from "
collection>,
// 타입 : 문자열
//from에서 정한 도큐먼트로부터
// 매칭되어 가져온 데이터를 여기서 정한
// 필드의 배열 안에 넣는다..
as: <output array field>
}

예시,
car_accident
area 컬렉션 , _id 와
by_month 컬렉션 비교 .
-> 각 지역별 인구정보를 by_month 컬렉션과 함께 묶기.

db.by_month.aggregate([
{
$lookup:
{
from:"area",
localField:"area_id",
foreignField: "_id",
as : "area_data"
}
},
{$limit: 1}
])

어려운 버전,
형식
{
$lookup:
{
from: <collection to join>,
// 추가1
// 타입 : document
// 옵션
// pipeline 파라미터에 현재 넘겨 받은
// 도큐먼트의 값을 비교 대조해야 할 필요성시.
// pipeline 파라미터에 현재 도큐먼트 값을
// 넘길수 있도록 변수를 선언해줌.
let: {<var_1>:<expression>,..,
<var_n> : <expression> },
// 추가2.
// 타입: 배열
// from 에서 설정한 컬렉션을 해당 파이프라인에
// 통과시킨뒤 출력되는 도큐먼트들을 as에서
// 정한 필드에 배열 요소로 연결함.
pipeline : [<pipeline to excute
on the collection to join>],
as: <output array field>
}

예시 )
db.orders.aggregate([
{
$lookup:
{
from:"warehouses",
// 이부분의 order_item
// 이부분의 order_qty
let:{order_item: "$item",
order_qty: "$ordered"},
// pipeline 파라미터에 있는 파이프라인
// 스테이지들은 warehouses 컬렉션에서
// 주어진 조건에 맞는 도큐먼트만 남기게 만듦.
pipeline: [
{ $match:
{ $ezpr:
{ $and:
[
// 사용함.
// $$order_item
// $$order_qty
{ $eq: ["$stock_item",
"$$order_item"]},
{ $gte: ["$instock",
"$$order_qty"]}
]
}
}
},
{ $project: { stock_item:0, _id:0}}
],
// stockdata 필드의 배열에 결과를 출력
as: "stockdata"
}
}
])



6 $replaceRoot
주어진 도큐먼트를 newRoot 값으로 바꿈.
도큐먼트 모양을 바꾸는 스테이지.
형식
{
$replaceRoot: {newRoot:<replacementDocument>}
}
-> 서브 도큐먼트를 도큐먼트 전체의 내용으로 바꾸려고 할 때
특히 유용.
예시)
db.by_month.aggregate([
{
$addFields: {
"month_data.city_or_province":
"$city_or_province",
"month_data.county":"$county"
}
},
{
$replaceRoot: { newRoot: {
$arrayElemAt: ["$month_data",0]
} }
}
])

7 $sample
주어진 size 값 만큼 랜덤하게 도큐먼트를 가져옴.
형식
{
$sample: { size: <positive integer>}
}
-> 일반적인 상황에서 랜덤 정렬을 한 후
도큐먼트를 뽑기 때문에
$sort 스테이지와 마찬가지로
allowDiskUsage 옵션이 true 가 아니면,
100MB 이상의 도큐먼트를 처리 못함.

예시
db.rating.aggregate([
{
$sample: { size: 3}
}
])


8 $sortByCount
1)주어진 필드의 값이 같은 도큐먼트 끼리 그룹화 후,
2)도큐먼트의 숫자를 세어 표시하고,
3)내림차순으로 정렬.
$group 과 $sort 작업을 한것과 같은 의미.

형식
{
$sortByCount : <expression>
}

예시
db.rating.aggregate([
{
$sortByCount: "$rating"
}
])

실습하기.

1. 하
1차 자치단체(city_or_province) 컬렉션에서
facet 스테이지를 이용하여
조건1
자치단체별(city_or_province)로
총 사용한 운영비를 구하고,
조건2
세부항목별(sub_category)로
총 사용한 운영비를 구해서
하나의 도큐먼트로 표시하기.
-> facet 스테이지 내부에서
group 스테이지를 이용하여
city_or_province와 sub_category로
묶기.

->
db.city_or_province.aggregate([
{
$facet: {
by_city_or_province: [
{
$group: {
_id: "$city_or_province",
sum_expenses: {$sum: "$this_term_expense"}
}
}
],
by_sub_category: [
{
$group: {
_id: "$sub_category",
main_category: {$first: "$main_category"},
sum_expenses: {$sum: "$this_term_expense"},
}
}
]
}
}
])



2. 중
1차 자치단체를 랜덤하게 두 곳을 골라 올해
가장 많이 사용한 운영비 세부항목을 표시하기.
->
1) city_or_province 컬렉션의 도큐먼트를
올해 운영비 내림차순으로 정렬.
2) 지역명으로 그룹화 하면서 첫 번째 도큐먼트 정보 남김.
3) 2개의 도큐먼트를 랜덤하게 뽑기.
->
db.city_or_province.aggregate([
{
$sort: {this_term_expense:-1}
},
{
$group: {
_id: "$city_or_province",
main_category: {$first: "$main_category"},
sub_category: {$first: "$sub_category"},
this_term_expense: {$first: "$this_term_expense"}
}
},
{
$sample: {
size : 2
}
}
])





3. 최상
-전국 2차 자치단체의 이름, 총 예산, 주민등록
인구를 하나의 도큐먼트로 정리해서 출력하기.
- 2차 자치단체 이름이ㅣ 두번 이상 쓰인 곳은
제외하고 출력해야함.
- 임베디드 구조가 없는 형식으로 출력해야 함.

-> unwind 와 addFields로 인구 정보와 예산정보를 합치는 방법

1) local 컬렉션을 2차 자치단체명으로 그룹화
2) population 컬렉션 과 2차 자치단체명으로 조인한다.
3) 2차 자치단체명이 중복되는 지역을 제외한다.
4) 조인된 배열 속 임베디드 도큐먼트에 예산 정보를 추가한다.
5) replaceRoot 스테이지로 임베디드 도큐먼트를 도큐먼트 자체로
변경하기.

->
db.local.aggregate([
{
$group: {
_id: "$local_government",
expense: {$sum : "$this_term_expense"}
}
},
{
$lookup: {
from: "population",
localField: "_id",
foreignField: "local_government",
as: "population_data"
}
}
,
{
$match: {population_data: {$size:1}}
},
{
$unwind: "$population_data"
},
{
$addFields: {
"population_data.expense": "$expense"
}
}
,
{
$replaceRoot : {
newRoot: "$population_data"
}
}

])

출처: <https://band.us/band/91753755> 

